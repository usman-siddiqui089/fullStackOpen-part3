{"version":3,"sources":["services/persons.js","component/Title.js","component/Person.js","component/Contacts.js","component/Search.js","component/NewPersonForm.js","component/DisplayContacts.js","component/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newContact","post","id","changedContact","put","delete","Title","text","Person","name","phone","onClickHandler","value","onClick","Contacts","contacts","length","map","contact","number","Search","currentVal","onChangeHandler","onChange","NewPersonForm","onSubmitHandler","nameVal","phoneVal","onChangeName","onChangePhone","onSubmit","type","DisplayContacts","showData","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchVal","setSearchVal","content","alertMessage","setAlertMessage","useEffect","personService","initialPersonList","displayAlert","setTimeout","updateContact","newPerson","changedPerson","p","deleteContact","event","target","person","find","window","confirm","filter","catch","preventDefault","isPersonDuplicate","isPhoneDuplicate","isNameDuplicate","returnedPerson","concat","error","searchResult","toLowerCase","includes","displayContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.899e9120.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newContact) => {\n    const request = axios.post(baseUrl,newContact)\n    return request.then(response => response.data)\n}\n\nconst update = (id,changedContact) => {\n    const request = axios.put(`${baseUrl}/${id}`,changedContact)\n    return request.then(response => response.data)\n}\n\nconst deleteContact = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, update, deleteContact}","import React from 'react';\n\nconst Title = ({text}) => {\n    return (\n        <h1>{text}</h1>\n    )\n}\n\nexport default Title","import React from 'react'\n\nconst Person = ({id,name,phone,onClickHandler}) => {\n    return (\n        <p>\n            {name}&nbsp;{phone}&nbsp;\n            <button value={id} onClick={onClickHandler}>Delete</button>\n        </p>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Contacts = ({contacts,onClickHandler}) => {\n    if(contacts.length !== 0){\n        return (\n            <>\n                {contacts.map(contact => <Person key={contact.name} id={contact.id} name={contact.name} phone={contact.number} onClickHandler={onClickHandler}/>)}\n            </>\n        )\n    }\n    else{\n        return (\n            <p>No contacts found in the Phonebook. Please add first.</p>\n        )\n    }\n}\n\nexport default Contacts","import React from 'react'\n\nconst Search = ({currentVal, onChangeHandler}) => {\n    return (\n        <>\n            Search Contacts: <input value={currentVal} onChange={onChangeHandler}/>\n        </>\n    )\n}\n\nexport default Search","import React from 'react'\n\nconst NewPersonForm = ({onSubmitHandler, nameVal, phoneVal, onChangeName, onChangePhone}) => {\n    return (\n        <>\n            <form onSubmit={onSubmitHandler}>\n                <div>\n                    Enter Name: <input value={nameVal} onChange={onChangeName}/><br /><br />\n                    Enter Phone: <input value={phoneVal} onChange={onChangePhone}/>\n                </div><br />\n                <button type='submit'>Save Contact</button>\n            </form>\n        </>\n    )\n}\n\nexport default NewPersonForm","import React from 'react'\n\nconst DisplayContacts = ({showData}) => {\n    return (\n        <>\n            {showData}\n        </>\n    )\n}\n\nexport default DisplayContacts","import React from 'react'\n\nconst Notification = ({message, type}) => {\n    if(message === null){\n        return null\n    }\n    else if(type === 'success'){\n        return (\n            <div className='success'>\n                {message}\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className='error'>\n                {message}\n            </div>\n        )\n    }\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Title from './component/Title'\nimport Contacts from './component/Contacts'\nimport Search from './component/Search'\nimport NewPersonForm from './component/NewPersonForm'\nimport DisplayContacts from './component/DisplayContacts'\nimport Notification from './component/Notification'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchVal, setSearchVal] = useState('')\n    const [alertMessage, setAlertMessage] = useState({\n        type: null,\n        content: null\n    })\n    useEffect(()=>{\n        personService\n            .getAll()\n            .then(initialPersonList => {\n                setPersons(initialPersonList)\n            })\n    },[])\n    const updateNames = (event) => {\n        setNewName(event.target.value)\n    }\n    const updatePhone = (event) => {\n        setNewNumber(event.target.value)\n    }\n    const searchItem = (event) => {\n        setSearchVal(event.target.value)\n    }\n    const displayAlert = (type,message) => {\n        const alert = {\n            type: type,\n            content: message\n        }\n        setAlertMessage(alert)\n        setTimeout(() => {\n            setAlertMessage({\n                type: null,\n                content: null\n            })\n        }, 5000);\n    }\n    const updateContact = (id) => {\n        const newPerson = {\n            name: newName,\n            number: newNumber\n        }\n        personService\n            .update(id,newPerson)\n            .then(changedPerson => {\n                setPersons(persons.map(p => (p.id !== id) ? p : changedPerson))\n                setNewName('')\n                setNewNumber('')\n            })\n            .then(()=>{\n                const message = `Modified ${newPerson.name} successfully.`\n                const type = 'success'\n                displayAlert(type,message)\n            })\n    }\n    const addContact = (event) => {\n        event.preventDefault()\n        const isPersonDuplicate = persons.find(person => (person.name === newName && person.number === newNumber) ? true : false)\n        const isPhoneDuplicate = persons.find(person => (person.name !== newName && person.number === newNumber) ? true : false)\n        const isNameDuplicate = persons.find(person => (person.name === newName && person.number !== newNumber) ? true : false)\n        if(isPersonDuplicate){\n            const message = 'This person name and phone is already present in phonebook. Please try new.'\n            const type = 'error'\n            displayAlert(type,message)\n        }\n        else if(isPhoneDuplicate){\n            const confirmation = window.confirm(`'${newNumber}' is already added to phonebook, replace the old name with a new name?`)\n            if(confirmation){\n                const person = persons.find(person => person.number === newNumber)\n                updateContact(person.id)\n            }\n        }\n        else if(isNameDuplicate){\n            const confirmation = window.confirm(`'${newName}' is already added to phonebook, replace the old number with a new number?`)\n            if(confirmation){\n                const person = persons.find(person => person.name === newName)\n                updateContact(person.id)\n            }\n        }\n        else{\n            const newPerson = {\n                name: newName,\n                number: newNumber\n            }\n            personService\n                .create(newPerson)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    setNewName('')\n                    setNewNumber('')\n                })\n                .then(()=>{\n                    const message = `'${newPerson.name}' added successfully to Phonebook.`\n                    const type = 'success'\n                    displayAlert(type,message)\n                })\n                .catch(error => {\n                    const message = error.response.data\n                    const type = 'error'\n                    displayAlert(type, message)\n                })\n        }\n    }\n    const displayContacts = () => {\n        if (searchVal !== ''){\n            const searchResult = persons.filter(person => (person.name.toLowerCase().includes(searchVal) || person.number.includes(searchVal)))\n            if(searchResult.length !== 0){\n                return (\n                    <Contacts contacts={searchResult} onClickHandler={deleteContact}/>\n                )\n            }\n            else{\n                return (\n                    <p>Sorry! No contact found</p>\n                )\n            }\n        }\n        else{\n            return(\n                <Contacts contacts={persons} onClickHandler={deleteContact}/>\n            )\n        }\n    }\n    const deleteContact = (event) => {\n        const id = event.target.value\n        const person = persons.find(person => person.id === id)\n        const confirmation = window.confirm(`Delete ${person.name}?`)\n        if(confirmation){\n            personService\n            .deleteContact(id)\n            .then(() => {\n                setPersons(persons.filter(p => p.id !== id))\n            })\n            .then(()=>{\n                const message = `'${person.name}' deleted successfully.`\n                const type = 'success'\n                displayAlert(type,message)\n            })\n            .catch(()=>{\n                const message = `Information of '${person.name}' has already been removed from the phonebook`\n                const type = 'error'\n                displayAlert(type,message)\n            })\n        }\n    }\n    return (\n      <>\n        <Title text='Phonebook'/>\n        <Notification type={alertMessage.type} message={alertMessage.content}/>\n        <Search currentVal={searchVal} onChangeHandler={searchItem}/>\n        <Title text='Add new contact'/>\n        <NewPersonForm onSubmitHandler={addContact} nameVal={newName} phoneVal={newNumber} onChangeName={updateNames} onChangePhone={updatePhone}/>\n        <Title text='Contacts'/>\n        <DisplayContacts showData={displayContacts()}/>\n      </>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}